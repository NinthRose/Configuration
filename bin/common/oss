#!/usr/bin/env python
from __future__ import print_function
import sys
import os, os.path as p
import oss2
import requests
import datetime, time
import shutil

try:
    import ConfigParser
except:
    import configparser as ConfigParser
import tarfile

DEFAULT_APPKEY='<your_appkey_here>'
DEFAULT_APPSECRET='<your_appsecret_here>'
DEFAULT_ENDPOINT='<your_appkey_here>'
DEFAULT_BUCKET='<default_bucket_here>'



auth = oss2.Auth(DEFAULT_APPKEY, DEFAULT_APPSECRET)
service = oss2.Service(auth, DEFAULT_ENDPOINT)
buc = oss2.Bucket(auth, DEFAULT_ENDPOINT, DEFAULT_BUCKET)


class OSSCMD(object):
    def __init__(self, access_id=DEFAULT_APPKEY, access_key=DEFAULT_APPSECRET,
                 end_point=DEFAULT_ENDPOINT, bucket=DEFAULT_BUCKET):
        self.auth = oss2.Auth(access_id, access_key)
        self.service = oss2.Service(self.auth, end_point)
        self.bucket = oss2.Bucket(self.auth, end_point, bucket)
        self.prefix = 'oss://%s/' % bucket

    def get_bucs(self):
        return [b.name for b in oss2.BucketIterator(service)]

    def list_files(self):
        result = []
        fmt_string = "%-34s%-5s%-22s%-10s"
        print(fmt_string % ('etag', 'size', 'last_modified', 'filename'))
        print("------------------------------------------------------------------------------------------------")
        for obj in oss2.ObjectIterator(self.bucket):
            result.append(obj.key)
            print(fmt_string % (
                obj.etag, self.bytes2human(obj.size), datetime.datetime.fromtimestamp(obj.last_modified), obj.key))
        return result

    def upload_dir(self, local_dir):
        dirname = p.basename(local_dir)
        os.chdir(p.dirname(local_dir))
        tar_path = "/tmp/%s.tar.gz" % dirname
        tar = tarfile.open(tar_path, "w:gz")
        os.chdir(p.join(local_dir, '..'))
        tar.add(dirname)
        tar.close()
        key = dirname + '.tar.gz'
        self.upload_file(tar_path, key)
        os.remove(tar_path)  # Tear down

    def download_dir(self, dir_name, where=None, overwirte=True):
        if not dir_name or dir_name == '':
            raise ValueError("Empty dir name is not allowed!")
        if not where:
            where = os.getcwd()

        tar_name = '%s.tar.gz' % dir_name
        tmp_path = "/tmp/%s.tar.gz" % tar_name
        self.download(tar_name, tmp_path)

        full_dst_path = p.join(where, dir_name)
        if p.exists(full_dst_path):
            if overwirte:
                print("Taget dir exist: %s OVERWRITE!" % full_dst_path)
                shutil.rmtree(full_dst_path)
            else:
                print("Taget dir exist: %s move to %s!" % (full_dst_path, full_dst_path + '.old'))
                shutil.move(full_dst_path, full_dst_path + '.old')

        tar = tarfile.open(tmp_path, 'r:gz')
        tar.extractall(where)
        tar.close()
        os.remove(tmp_path)

    def upload_file(self, local, key=None):
        if not key:
            key = p.basename(local)
        os.chdir(p.dirname(local))
        print('Executing upload task...\n[Local]: %s -> [remote]: %s' % (local, self.prefix + key))
        result = self.bucket.put_object_from_file(key, p.basename(local), None, self.percentage)
        print('Upload task done...')
        return result

    def upload_url(self, url, key):
        input = requests.get(url)
        print('Executing upload(via URL) task...\n[URL]: %s -> [remote]: %s' % (url, self.prefix + key))
        result = self.bucket.put_object(key, input)
        print('Upload(url) task done...')
        return result

    def download(self, key, path):
        print('Executing download task...\n[remote]: %s -> [local]: %s' % (self.prefix + key, path))
        result = self.bucket.get_object_to_file(key, path, progress_callback=self.percentage)
        print('Download task done...')
        return result

    def share(self, key, expire=3600):
        result = self.bucket.sign_url('GET', key, expire)
        expire_time = datetime.datetime.fromtimestamp(time.time() + expire)
        print('Share Object [%s]: Expire@%s\nLink: %s' % (key, expire_time, result))
        return result

    def delete(self, key):
        print('Executing deletion task...\n[Remote]: %s' % (self.prefix + key))
        result = self.bucket.delete_object(key)
        return result

    @staticmethod
    def percentage(consumed_bytes, total_bytes):
        if total_bytes:
            rate = int(100 * (float(consumed_bytes) / float(total_bytes)))
            print('\r{0}% '.format(rate), end='')
            sys.stdout.flush()

    @staticmethod
    def bytes2human(n):
        symbols = ('K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')
        prefix = {}
        for i, s in enumerate(symbols):
            prefix[s] = 1 << (i + 1) * 10

        for s in reversed(symbols):
            if n >= prefix[s]:
                value = int(float(n) / prefix[s])
                return '%s%s' % (value, s)
        return '%sB' % n

    @staticmethod
    def from_settings(path=None):
        cf = ConfigParser.ConfigParser()
        path = path or p.join(os.environ['HOME'], '.osscredentials')
        cf.read(path)
        options = dict(cf.items('OSSCredentials'))
        return OSSCMD(options['accessid'], options['accesskey'], options['endpoint'], options['bucket'])


oss = OSSCMD()


def show_usage():
    info = '''
        %Usage: osscmd ls | get | put | url | rm | share | getd | pull | up
            osscmd ls                               :   List all objects
            osscmd get key path="./key"             :   Get object
            osscmd put path key="`basename path`"   :   Put object
            osscmd url url key                      :   Download given url
            osscmd rm key                           :   Delete given object
            osscmd share key expire=3               :   Share object with link
    '''
    print(info)
    exit(1)


def get(args):
    nargs = len(args)
    if nargs == 1:
        # Download file from oss into cwd with basename of key
        src_path = args[0]
        dst_path = p.basename(src_path)
        oss.download(src_path, dst_path)
    elif nargs == 2:
        # Download file with given path. rel path will translate to abs path
        src_path, dst_path = args[0], args[1]
        if not dst_path.startswith('/'):
            dst_path = p.join(os.getcwd(), dst_path)
        oss.download(src_path, dst_path)
    else:
        show_usage()


def get_directory(args):
    nargs = len(args)
    if nargs == 1:
        # Download and unzip directory
        src_name = args[0]
        oss.download_dir(src_name)

    elif nargs == 2:
        # dst_path is the directory will contains target directory.
        src_name, dst_dir = args[0], args[1]

        if not dst_dir.startswith('/'):
            dst_dir = p.join(os.getcwd(), dst_dir)
        if not p.isdir(dst_dir):
            raise ValueError("Target container should be a directory")

        oss.download_dir(src_name, dst_dir)
    else:
        show_usage()


def put(args):
    nargs = len(args)
    if nargs == 1:
        # upload file with same basename
        src_path = args[0]
        if not src_path.startswith('/'):
            src_path = p.join(os.getcwd(), src_path)
        if src_path.endswith('/'):
            src_path = src_path[:-1]

        if p.isdir(src_path):
            oss.upload_dir(src_path)
        elif p.isfile(src_path):
            oss.upload_file(src_path)
        else:
            show_usage()
    else:
        show_usage()


def up():
    # upload current directory
    src_path = os.getcwd()
    if not src_path.startswith('/'):
        src_path = p.join(os.getcwd(), src_path)
    if src_path.endswith('/'):
        src_path = src_path[:-1]

    oss.upload_dir(src_path)


def pull():
    # refresh current directory
    cwd = os.getcwd()
    if len(cwd.split('/')) < 4:
        raise ValueError("Dangerous! do it manually!")
    src_name, dir_name = p.basename(cwd), p.dirname(cwd)
    oss.download_dir(src_name, dir_name, overwirte=True)


def share(args):
    if len(args) != 1:
        show_usage()
    oss.share(args[0])


def upload_url(args):
    if len(args) != 2:
        show_usage()
    oss.upload_url(args[0], args[1])


def remove(args):
    if len(args) != 1:
        show_usage()
    oss.delete(args[0])


def cmd(action, args):
    if action == 'ls':
        oss.list_files()
    elif action == 'get':
        get(args)
    elif action == 'put':
        put(args)
    elif action == 'getd':
        get_directory(args)
    elif action == 'up':
        up()
    elif action == 'pull':
        pull()
    elif action == 'rm':
        remove(args)
    elif action == 'url':
        upload_url(args)
    elif action == 'share':
        share(args)
    else:
        show_usage()


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("Subcommand is required!")
        show_usage()
    cmd(sys.argv[1], sys.argv[2:])
